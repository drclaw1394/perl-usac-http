#!/usr/bin/env perl
use strict;
use warnings;
use version; our $VERSION=version->declare("v0.1");
use feature qw<say>;

use Log::ger;
use Log::ger::Output "Screen";
use Log::ger::Util;
use Log::OK {
	lvl=>"info",
	opt=>"verbose",
};

Log::ger::Util::set_level Log::OK::LEVEL;



use File::Spec::Functions qw<rel2abs>;
use File::Basename qw<dirname basename>;
use Cwd;
use Pod::Usage;

#usac-http server command line utility
use uSAC::HTTP;
use uSAC::HTTP::Server;
use uSAC::HTTP::Static;
use uSAC::HTTP::Middleware qw<log_simple>;
use Socket ":all";
use Socket::More ":all";


use uSAC::HTTP::State::JSON qw<state_json>;

use Getopt::Long;
my %options;
my $verbose=0;
$options{quiet}=sub {$verbose=0};
$options{verbose}=\$verbose;
$options{listen}=[];

GetOptions \%options,
	"help",
	"host=s@",
	"listen=s@",
	"product=s",
	"preclude=s@",
	"postclude=s@",
	"www-root=s@"	,	#serve files from this location
	"list-dir",		#serve html rendered dir list from this location
	"ws=s%", 		#connect to uri (unix:// tcp:// udp:// ws:// file://) and just spit the information 

	"mime-add=s%",		#Specifiy a mime type mapping for an extension, add to list
	"mime=s%",		#Specifiy a file containing a list of mime types
				#on a websocket
	"route=s%",		#url to named sub 		GET, URI, SUB
	"route-do=s%",		#url to a single pl file	METHOD, URI, FILE
	"quiet",		#quiet flag
	"watch",		#watch changes to input files, and relauch
	"verbose",
	"log",

	"interface=s@",
	"group=s@",
	"address=s@",



	or pod2usage verbose=>1;

pod2usage verbose=>2 if $options{help};
# TODO:
#	--ws my/uri=file://file_to_watch
#	--ws my/ws=unix://named_fifo
#	--ws my/bridge=tcp://host:port
#	--ws my/bridge=udp://host:port
#	--ws my/bridge=http://host:port/path		#will hammer the destination if not long poll
#
#	--mqtt my/url=>mqtt://host:port/topic		#subscribes to a topic and pushes the newest
#							#message out to incomming connections.
#							#if accept is multipart then mutiple messages	

# Currently Working on:
#	--static-file /prefix=path_to_dir_with_static_files
#	--static-dir /prefix=path_to_dir_list		#uses accepts to determing format
#		
#
#create server instance;
#load any config file specified

#set default listener if non provided

my $welcome="uSAC Server version $VERSION";
Log::OK::INFO and log_info $welcome;



my $server;
$server=usac_server{
	#set the sub product
	usac_middleware log_simple dump_headers=>1 if $options{log};
	#add all listeners
	my @spec;
	my $listeners=$options{listen};

	if(@$listeners){
		for my $listener (@$listeners){
			push @spec, parse_passive_spec($listener);
		}
	}
	else {
		#Add the default listener on all INET.* interfaces, port 5000
		push @spec, {
			#interface=>[".*"],
			address=>["localhost"],
			family=>[AF_INET, AF_INET6],
			type=>[SOCK_STREAM],
			port=>5000
		};
	}

	usac_listen($_) for @spec;
	usac_sub_product "test";

	#add additional files
	my $includes=$options{preclude};

	for my $include (@$includes){
		#convert to abs for intended behaviour	
		my $target=rel2abs($include,getcwd);
		Log::OK::INFO and log_info "Including config from source:\n $target";
		usac_include $target;
	}

	usac_site {
		#add the hosts we respond to (add all listeners)
		usac_id "test";

		#add additional files
		my $hosts=$options{hosts};
		for my $host (@$hosts){
			Log::OK::INFO and log_info "Virtual host $host";
			usac_host $hosts;
		}
		unless(@$hosts){
			Log::OK::WARN and log_warn "No virtual host setup. Accepting for any host";
		}

		#add the routes
		#usac_route "/static/$File_Path" => usac_file_from "../data";

                #add static file routes
                my $static=$options{"www-root"};
		my @roots;
                for my $s (@$static){
                        push @roots, usac_file_under list_dir=>$options{"list-dir"}, $s;
                } 
		usac_route ["GET", "HEAD"],"/", state_json, @roots;

		#TODO: fix dir listing so it can be chainable


	};

	#add additional files
	$includes=$options{postclude};
	for my $include (@$includes){
		#convert to abs for intended behaviour	
		my $target=rel2abs($include,getcwd);
		Log::OK::INFO and log_info "Including config from source: $target";
		usac_include $target;
	}
};

$server->run();
__END__

=head1 TITLE

usac - Serve files via HTTP

=head1 SYNOPSIS

	usac [options]


=head1 DESCRIPTION

usac is a HTTP server easiliy configured for serving static files. It is a
application wrapper around the uSAC::HTTP module.


=head1 OPTIONS


=over

=item help

Show detailed usage information

=item host

Virtual hosts server will respond to. Multiple accepted.

=item listen

Network interfaces to listen on. Multiple accepted.

=item www-root

Directory to serve files from. Multiple accepted.

=item list-dir

Allow listing of directories

=item log

Enable logging of requests


=back

