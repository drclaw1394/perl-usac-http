#!/usr/bin/env perl
use v5.36;
our $VERSION="v0.1.0";

use feature qw<try>;
no warnings "experimental";

BEGIN{
  # Before we even attempt setup, check if help is needed
  if(grep /-{1,2}h/, @ARGV){
    require uSAC::Util; # For path manipulation, relative to this file
    require Pod::Usage;                    

    Pod::Usage::pod2usage(verbose=>1, );
  }
}

use Log::ger;
use Log::ger::Output "Screen";
use Log::OK {
	lvl=>"info",
	opt=>"verbose",
};

use EV;
use AnyEvent;

use Import::These qw<uSAC:: Util ::HTTP:: Server ::Middleware:: Static Log>;

my %options;


# inject a site with prefix. any routes mounted after will use this prefix
# --site
# --site "prefix=0";
# --site "id=df,prefix=23"

sub parse_site_spec{
  no warnings "experimental";
  my $input=$_[0];
  my @full=qw<id prefix>;
  my %spec;
  for my $field(split ",", $input){
    unless($field=~/=/){
      #Assume only a site name, with empty prefix
      $spec{id}=$field;
      next;
    }
    for my ($key, $value)(split "=", $field, 2){
      #say $key;
      #say $value;
			$key=~s/ //g;
			$value=~s/ //g;
			my @val;

			#Ensure only 0 or 1 keys match
			die "Ambiguous field name: $key" if 2<=grep /^$key/i, @full;

      # Find the first item that starts with the shorthand
			($key)=grep /^$key/i, @full;
      $spec{$key}=$value;
    }
  }
  \%spec;
}

my @staging;


# Welcome
my $welcome= "uSAC HTTP Server $VERSION - Copyright 2023 Ruben Westerberg
";
Log::OK::INFO and log_info $welcome;



my %sites;

my $server_proxy=uSAC::HTTP::Site->new;
$sites{"/"}=$server_proxy;

my $current=$server_proxy;
my %cur_opts=(list_dir=>1);


my @unkown;
while(@ARGV){
  $_=shift; # from @ARGV
  if(/-{1,2}site/){
    $_=shift;
    my $spec= parse_site_spec($_);
    my $new=$spec->{id}?$sites{$spec->{id}}:undef;
    unless($new){
      $sites{$spec->{id}}=$new=uSAC::HTTP::Site->new($spec->%*);
      $current->add_site($new);
    }
    $current=$new;
    next;
  }

  elsif(/^-{1,2}listen/){

    $options{listen}=shift;
    die "Listen argument required" unless $options{listen};
    #$options{"listen"}||=["[::]:8000"];                                                                                 #
  }

  elsif(/^-{1,2}(no-)?list-dir/){
    $cur_opts{list_dir}=!$1;
  }

  elsif(/^-{1,2}(no-)?log/){
    $cur_opts{log}=!$1;
  }
  elsif(/^--/){
    # End processing of options  
    last;
  }
  elsif(/^[^-]/){
    # Treat as path to file or dir
    #convert to abs for intended behaviour	
    my $target=uSAC::Util::rel2abs($_, uSAC::Util::cwd);

    if(/\.psgi$/i){
      # Add explicit PSGI middleware with path to application
      # uses site prefix  for mounting
      #
      Log::OK::INFO and log_info "Loading PSGI from source:\n $target";
      require uSAC::HTTP::Middleware::PSGI;
      $current->add_route("", uSAC::HTTP::Middleware::PSGI::uhm_psgi($_));
    }
    elsif(/\.route$|\.pl$/){
      Log::OK::INFO and log_info "Loading Routes from source:\n $target";
      # perl script to run as  
      $current->load($target);
    }
    else {
      # Assume a dir for serving static files from
      Log::OK::INFO and log_info "Serving static files from source:\n $target";
      $current->add_route("", uhm_static_root roots=>[$_], %cur_opts);
    }
  }
  else {
    # Known options
  }

}


$options{"listen"}//=["[::]:8000"];
# Create server
#
my $server=uSAC::HTTP::Server->new(listen=>$options{listen});


# Inject logging if logging enabled
#
$server->add_middleware( uhm_log dump_headers=>1, color=>1) if $options{log};
$server->add_site($server_proxy);
# Configure
my @options=@unkown;
$server->parse_cli_options(@options);

# Run!
$server->run();


__END__

=head1 TITLE

usac -  Utility HTTP Server

=head1 SYNOPSIS

	usac --site id=ID,prefix=PREFIX --site routes


=head1 DESCRIPTION

usac is a HTTP for serving static files preconfigured routes and piping
websockets from the command line. It is a application wrapper around
uSAC::HTTP.

It is flexible to allow constructing prefixed grouping of routes, mounting
'applications' into different names spaces.


Options and input files are interleved, and interact in a stateful manner.


=head1 OPTIONS



=over

=item help

Show detailed usage information

=item listen

Network interfaces to listen on. Multiple accepted.

=item site

    --site id=ID
    --site ID

Selects a existing site with id of ID.

  --site id=id,prefix=>prefix

Creates a new site with

Add a group ( a "site") for the following routes/static files to be placed
under. Useful  for defining a prefix and/or host specific routes.

If the site id exists, the existing site is choosen and the newly specified
prefix is ignored. Otherwise a new site is created and added as a sub site to
the current site, with the prefix provided (if any)

The top level site is "/" which is automatically selected.

=item list-dir no-list-dir

Enable/disable listing of directories for static file serving

=item log

Enable logging of requests


=back

# TODO:
#	--site prefix=asdf --ws route_name --in file:// --out 
# --site prefix=asdf --r route_name  --in file:// fd:// http://proxy

#
#	--mqtt my/url=>mqtt://host:port/topic		#subscribes to a topic and pushes the newest
#							#message out to incomming connections.
#							#if accept is multipart then mutiple messages	

# Currently Working on:
#	--static-file /prefix=path_to_dir_with_static_files
#	--static-dir /prefix=path_to_dir_list		#uses accepts to determing format
#		
#
#create server instance;
#load any config file specified

#set default listener if non provided


