#!/usr/bin/env perl
use v5.36;
our $VERSION="v0.1.0";

use feature qw<try>;
no warnings "experimental";

use Log::ger;
use Log::ger::Output "Screen";
use Log::OK {
	lvl=>"info",
	opt=>"verbose",
};

use EV;
use AnyEvent;

use Import::These qw<uSAC:: Util ::HTTP:: Server ::Middleware:: Static Log>;


use Getopt::Long::Complete;
Getopt::Long::Complete::Configure("pass_through");

my %options;
my $verbose=0;

$options{quiet}=sub { $verbose=0 };
$options{verbose}=\$verbose;

GetOptions \%options,
  # Help
	"help",
  
  # Listener
	"listen=s@",

  # Static file options
	"www-root=s@"	,	#serve files from this location
	"list-dir",		#serve html rendered dir list from this location
  "read-size=i",
  "indexes=s@",

  # Routes
	"preclude=s@",
	"postclude=s@",

  # Log
	"log",

	"host=s@",
	"product=s",
	"ws=s%", 		#connect to uri (unix:// tcp:// udp:// ws:// file://) and just spit the information 

	"mime-add=s%",		#Specifiy a mime type mapping for an extension, add to list
	"mime=s%",		#Specifiy a file containing a list of mime types
				#on a websocket
	"route=s%",		#url to named sub 		GET, URI, SUB
	"route-do=s%",		#url to a single pl file	METHOD, URI, FILE
	"quiet",		#quiet flag
	"watch",		#watch changes to input files, and relauch
	"verbose",


	or do {
    require Pod::Usage;
    Pod::Usage::pod2usage(verbose=>1);
  };


# default static files from the current directory
$options{"www-root"}//=["."];
$options{"listen"}//=["[::]:8000"];


if($options{help}){
  require Pod::Usage;
  Pod::Usage::pod2usage(verbose=>2);
}


# Welcome
my $welcome= "uSAC HTTP Server $VERSION - Copyright 2023 Ruben Westerberg
";
Log::OK::INFO and log_info $welcome;



# Create server
#
my $server=uSAC::HTTP::Server->new(listen=>$options{listen});


# Inject logging if logging enabled
#
$server->add_middleware( uhm_log dump_headers=>1, color=>1) if $options{log};


# Load routes
#
my $includes=$options{preclude};

for my $include (@$includes){
  #convert to abs for intended behaviour	
  my $target=uSAC::Util::rel2abs($include, uSAC::Util::cwd);
  Log::OK::INFO and log_info "Loading from source:\n $target";
  $server->load($target);
}

# Add static files if present
#
my $static=$options{"www-root"};
if(@$static){
  my $site=uSAC::HTTP::Site->new(id=>"Static_files");
  $server->add_site($site);

  #add static file routes

  $site->add_route("", uhm_static_root roots=>$static, 
        list_dir  =>  $options{"list-dir"},
        read_size =>  $options{"read-size"},
        indexes   =>  $options{indexes},
      );
}
  
#add additional files

$includes=$options{postclude};
for my $include (@$includes){
  #convert to abs for intended behaviour	
  my $target=uSAC::Util::rel2abs($include, uSAC::Util::cwd);
  Log::OK::INFO and log_info "Loading from source: $target";
  $server->load($target);
}

# Configure
$server->parse_cli_options(@ARGV);

# Run!
$server->run();
