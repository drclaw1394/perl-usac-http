#!/usr/bin/env perl
use v5.36;
our $VERSION="v0.1.0";

use feature qw<try>;
no warnings "experimental";

use Log::ger;
use Log::ger::Output "Screen";
use Log::OK {
	lvl=>"info",
	opt=>"verbose",
};

use EV;
use AnyEvent;

use Import::These qw<uSAC:: Util ::HTTP:: Server ::Middleware:: Static Log>;


use Getopt::Long::Complete;
Getopt::Long::Complete::Configure("pass_through");

my %options;
my $verbose=0;

$options{quiet}=sub { $verbose=0 };
$options{verbose}=\$verbose;

GetOptions \%options,
	"help",
	"host=s@",
	"listen=s@",
	"product=s",
	"preclude=s@",
	"postclude=s@",
	"www-root=s@"	,	#serve files from this location
	"list-dir",		#serve html rendered dir list from this location
	"ws=s%", 		#connect to uri (unix:// tcp:// udp:// ws:// file://) and just spit the information 

	"mime-add=s%",		#Specifiy a mime type mapping for an extension, add to list
	"mime=s%",		#Specifiy a file containing a list of mime types
				#on a websocket
	"route=s%",		#url to named sub 		GET, URI, SUB
	"route-do=s%",		#url to a single pl file	METHOD, URI, FILE
	"quiet",		#quiet flag
	"watch",		#watch changes to input files, and relauch
	"verbose",
	"log",

	"interface=s@",
	"group=s@",
	"address=s@",
  "read-size=i",
  "indexes=s@"



	or do {
    require Pod::Usage;
    Pod::Usage::pod2usage(verbose=>1);
  };

  #say  "hello";
  #exit;

# default static files from the current directory
$options{"www-root"}//=["."];
$options{"listen"}//=["[::]:8000"];


if($options{help}){
  require Pod::Usage;
  Pod::Usage::pod2usage(verbose=>2);
}

# TODO:
#	--ws my/uri=file://file_to_watch
#	--ws my/ws=unix://named_fifo
#	--ws my/bridge=tcp://host:port
#	--ws my/bridge=udp://host:port
#	--ws my/bridge=http://host:port/path		#will hammer the destination if not long poll
#
#	--mqtt my/url=>mqtt://host:port/topic		#subscribes to a topic and pushes the newest
#							#message out to incomming connections.
#							#if accept is multipart then mutiple messages	

# Currently Working on:
#	--static-file /prefix=path_to_dir_with_static_files
#	--static-dir /prefix=path_to_dir_list		#uses accepts to determing format
#		
#
#create server instance;
#load any config file specified

#set default listener if non provided

my $welcome=
"uSAC HTTP Server $VERSION - Copyright 2023 Ruben Westerberg
";
Log::OK::INFO and log_info $welcome;



my $server;
$server=uSAC::HTTP::Server->new(listen=>$options{listen});

$server->add_middleware( uhm_log dump_headers=>1, color=>1) if $options{log};



#add additional files
my $includes=$options{preclude};

for my $include (@$includes){
  #convert to abs for intended behaviour	
  my $target=uSAC::Util::rel2abs($include, uSAC::Util::cwd);
  Log::OK::INFO and log_info "Loading from source:\n $target";
  $server->load($target);
}

my $site=uSAC::HTTP::Site->new(id=>"Static_files");
$server->add_site($site);

#add static file routes
my $static=$options{"www-root"};

if(@$static){
  $site->add_route("", uhm_static_root roots=>$static, 
        list_dir  =>  $options{"list-dir"},
        read_size =>  $options{"read-size"},
        indexes   =>  $options{indexes},
      );
}
  
#add additional files

$includes=$options{postclude};
for my $include (@$includes){
  #convert to abs for intended behaviour	
  my $target=uSAC::Util::rel2abs($include, uSAC::Util::cwd);
  Log::OK::INFO and log_info "Loading from source: $target";
  $site->load($target);
}

$server->parse_cli_options(@ARGV);
$server->run();

__END__


=head1 TITLE

usac -  HTTP Server

=head1 SYNOPSIS

	usac [options]


=head1 DESCRIPTION

usac is a HTTP server easiliy configured for serving static files. It is a
application wrapper around uSAC::HTTP


=head1 OPTIONS


=over

=item help

Show detailed usage information

=item host

Virtual hosts server will respond to. Multiple accepted.

=item listen

Network interfaces to listen on. Multiple accepted.

=item www-root

Directory to serve files from. Multiple accepted.

=item list-dir

Allow listing of directories

=item log

Enable logging of requests


=back

